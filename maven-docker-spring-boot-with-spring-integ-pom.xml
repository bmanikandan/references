<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.8.RELEASE</version>
	</parent>

	<groupId>com.org.app.something</groupId>
	<artifactId>ornsplmsg</artifactId>
	<version>1.0.0</version>
	<name>Name of the Application</name>
	<description>Description about the application</description>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<start-class>com.org.special.purpose.Application</start-class>
		<dev.docker.image.prefix>docker.com/dev</dev.docker.image.prefix>
		<sit.docker.image.prefix>docker.com/sit</sit.docker.image.prefix>
		<uat.docker.image.prefix>docker.com/uat</uat.docker.image.prefix>
		<prod.docker.image.prefix>docker.com/prod</prod.docker.image.prefix>
		<docker.image.prefix>admin/test</docker.image.prefix>
		<runtime.scope>provided</runtime.scope>

		<!-- Sonar Continues Code Quality Inspection, 80% coverage always required to met  -->
		<sonar.projectName>ornsplmsg</sonar.projectName>
		<sonar.junit.reportPaths>${project.basedir}/target/jacoco.exec</sonar.junit.reportPaths>
		<sonar.jacoco.itReportPath>${project.basedir}/target/jacoco-it.exec</sonar.jacoco.itReportPath>
	</properties>

	<!-- Overrides a different version of a Cloud dependency other than the one managed by Spring Boot -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Dalston.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-undertow</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-ws</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-integration</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.hamcrest</groupId>
					<artifactId>hamcrest-core</artifactId>
				</exclusion>
			</exclusions>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.6.1</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.6.1</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-xml</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.ws</groupId>
			<artifactId>spring-ws-security</artifactId>
		</dependency>
		<dependency>
			<artifactId>commons-httpclient</artifactId>
			<groupId>commons-httpclient</groupId>
			<version>3.1</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.1</version>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>local</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<profiles>
								<profile>test</profile>
								<profile>dev</profile>
								<profile>sit</profile>
								<profile>uat</profile>
								<profile>perf</profile>
								<profile>prod</profile>
							</profiles>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jaxws-maven-plugin</artifactId>
						<version>2.4.1</version>
						<executions>
							<execution>
								<goals>
									<goal>wsimport</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<bindingFiles>
								<bindingFile>${basedir}/src/main/resources/wsdl/binding.xml</bindingFile>
							</bindingFiles>
							<wsdlUrls>
								<wsdlUrl>https://country-list-soap?wsdl</wsdlUrl>
							</wsdlUrls>
							<vmArgs>
								<vmArg>-Djavax.xml.accessExternalSchema=all</vmArg>
							</vmArgs>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${project.build.directory}/generated-sources/wsimport/</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<configuration>
							<destFile>${sonar.jacoco.reportPaths}</destFile>
							<append>true</append>
						</configuration>
						<executions>
							<execution>
								<id>prepare-unit-tests</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>prepare-integration-tests</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<phase>pre-integration-test</phase>
							</execution>
							<execution>
								<id>jacoco-site</id>
								<phase>verify</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>develop</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<profiles>
								<profile>test</profile>
								<profile>dev</profile>
								<profile>sit</profile>
								<profile>uat</profile>
								<profile>perf</profile>
								<profile>prod</profile>
							</profiles>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jaxws-maven-plugin</artifactId>
						<version>2.4.1</version>
						<executions>
							<execution>
								<goals>
									<goal>wsimport</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<bindingFiles>
								<bindingFile>${basedir}/src/main/resources/wsdl/binding.xml</bindingFile>
							</bindingFiles>
							<wsdlUrls>
								<wsdlUrl>https://country-list-soap?wsdl</wsdlUrl>
							</wsdlUrls>
							<vmArgs>
								<vmArg>-Djavax.xml.accessExternalSchema=all</vmArg>
							</vmArgs>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${project.build.directory}/generated-sources/wsimport/</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.4.11</version>
						<configuration>
							<imageName>${dev.docker.image.prefix}/${project.artifactId}</imageName>
							<dockerDirectory>src/main/docker</dockerDirectory>
							<resources>
								<resource>
									<targetPath>/</targetPath>
									<directory>${project.build.directory}</directory>
									<include>${project.build.finalName}.jar</include>
								</resource>
								<resource>
									<targetPath>/</targetPath>
									<directory>src/main/resources</directory>
									<include>logback.xml</include>
								</resource>
							</resources>
						</configuration>
						<executions>
							<execution>
								<id>build-image</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>tag-image-version</id>
								<phase>package</phase>
								<goals>
									<goal>tag</goal>
								</goals>
								<configuration>
									<forceTags>true</forceTags>
									<image>${dev.docker.image.prefix}/${project.artifactId}</image>
									<newName>${dev.docker.image.prefix}/${project.artifactId}:${project.version}</newName>
								</configuration>
							</execution>
							<execution>
								<id>tag-image-latest</id>
								<phase>package</phase>
								<goals>
									<goal>tag</goal>
								</goals>
								<configuration>
									<forceTags>true</forceTags>
									<image>${dev.docker.image.prefix}/${project.artifactId}</image>
									<newName>${dev.docker.image.prefix}/${project.artifactId}:latest</newName>
								</configuration>
							</execution>
							<execution>
								<id>push-image</id>
								<phase>package</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<!--<forceTags>true</forceTags>-->
									<imageName>${dev.docker.image.prefix}/${project.artifactId}:${project.version}</imageName>
									<serverId>docker-dtr</serverId>
									<registryUrl>https://docker.com</registryUrl>
									<retryPushCount>1</retryPushCount>
								</configuration>
							</execution>
							<execution>
								<id>push-image-latest</id>
								<phase>package</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<!--<forceTags>true</forceTags>-->
									<imageName>${dev.docker.image.prefix}/${project.artifactId}:latest</imageName>
									<serverId>docker-dtr</serverId>
									<registryUrl>https://docker.com</registryUrl>
									<retryPushCount>1</retryPushCount>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<configuration>
							<destFile>${sonar.jacoco.reportPaths}</destFile>
							<append>true</append>
						</configuration>
						<executions>
							<execution>
								<id>prepare-unit-tests</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>prepare-integration-tests</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<phase>pre-integration-test</phase>
							</execution>
							<execution>
								<id>jacoco-site</id>
								<phase>verify</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>master</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<profiles>
								<profile>test</profile>
								<profile>dev</profile>
								<profile>sit</profile>
								<profile>uat</profile>
								<profile>perf</profile>
								<profile>prod</profile>
							</profiles>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jaxws-maven-plugin</artifactId>
						<version>2.4.1</version>
						<executions>
							<execution>
								<goals>
									<goal>wsimport</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<bindingFiles>
								<bindingFile>${basedir}/src/main/resources/wsdl/binding.xml</bindingFile>
							</bindingFiles>
							<wsdlUrls>
								<wsdlUrl>https://country-list-soap?wsdl</wsdlUrl>
							</wsdlUrls>
							<vmArgs>
								<vmArg>-Djavax.xml.accessExternalSchema=all</vmArg>
							</vmArgs>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${project.build.directory}/generated-sources/wsimport/</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.4.11</version>
						<configuration>
							<imageName>${sit.docker.image.prefix}/${project.artifactId}</imageName>
							<dockerDirectory>src/main/docker</dockerDirectory>
							<resources>
								<resource>
									<targetPath>/</targetPath>
									<directory>${project.build.directory}</directory>
									<include>${project.build.finalName}.jar</include>
								</resource>
								<resource>
									<targetPath>/</targetPath>
									<directory>src/main/resources</directory>
									<include>logback.xml</include>
								</resource>
							</resources>
						</configuration>
						<executions>
							<execution>
								<id>default-jar</id>
								<phase>none</phase>
								<configuration>
									<finalName>unwanted</finalName>
									<classifier>unwanted</classifier>
								</configuration>
							</execution>
							<execution>
								<id>build-image</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>tag-image-version</id>
								<phase>package</phase>
								<goals>
									<goal>tag</goal>
								</goals>
								<configuration>
									<forceTags>true</forceTags>
									<image>${sit.docker.image.prefix}/${project.artifactId}</image>
									<newName>${sit.docker.image.prefix}/${project.artifactId}:${project.version}</newName>
								</configuration>
							</execution>
							<execution>
								<id>tag-image-latest</id>
								<phase>package</phase>
								<goals>
									<goal>tag</goal>
								</goals>
								<configuration>
									<forceTags>true</forceTags>
									<image>${sit.docker.image.prefix}/${project.artifactId}</image>
									<newName>${sit.docker.image.prefix}/${project.artifactId}:latest</newName>
								</configuration>
							</execution>
							<execution>
								<id>push-image</id>
								<phase>package</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<!--<forceTags>true</forceTags>-->
									<imageName>${sit.docker.image.prefix}/${project.artifactId}:${project.version}</imageName>
									<serverId>docker-dtr</serverId>
									<registryUrl>docker.com</registryUrl>
									<retryPushCount>1</retryPushCount>
								</configuration>
							</execution>
							<execution>
								<id>push-image-latest</id>
								<phase>package</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<!--<forceTags>true</forceTags>-->
									<imageName>${sit.docker.image.prefix}/${project.artifactId}:latest</imageName>
									<serverId>docker-dtr</serverId>
									<registryUrl>https://docker.com</registryUrl>
									<retryPushCount>1</retryPushCount>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<configuration>
							<destFile>${sonar.jacoco.reportPaths}</destFile>
							<append>true</append>
						</configuration>
						<executions>
							<execution>
								<id>prepare-unit-tests</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>prepare-integration-tests</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<phase>pre-integration-test</phase>
							</execution>
							<execution>
								<id>jacoco-site</id>
								<phase>verify</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>