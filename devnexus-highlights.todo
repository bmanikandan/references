Devnexus  Developer Conference Organized by Atlanta JUG
--------------------------------------------------------

Event Date: Feb 19, 2020  Feb 21

Talks:

1. Domain Driven Design (1 day workshop)

    Effective design forces the organization to understand what it must excel at and is
    used to guide the creation of the correct software model.

    If you are afraid that producing software with thoughtful design is expensive,
    think of how much more expensive it’s going to be to live with or even fix a bad design.
    This is especially so when we are talking about software that needs to distinguish
    your organization from all others and yield considerable competitive advantages.

    Most people make the mistake of thinking design is what it looks like.
    People think it’s this veneer—that the designers are handed this box
    and told, “Make it look good!” That’s not what we think design is.
    It’s not just what it looks like and feels like. Design is how it works.  —Steve Jobs

    1. Domain Driven Design (Dealing complexity at the heart of software) - Eric Evanes
    2. Implementing Domain Driven Design (Vaughn Vernon)

    * Ubiquitous Language
    * Bounded Context
    * Stratgic Design (Subdomain, Context Mapping)
    * Tactical Design (Aggregate)
    * Events

2. Microservices Authorization and Access Control - Yoel Spotts
  ☐ Session by Home Depot team on how policies can be setup using Keycloak

3. Defense Against Common Security Threats - Brian Vermeer
4. 10 Java Security Practices They Didn't Teach You In School - Brian Vermeer


5. Effective Java SE 9 through 14 APIs/Lang features, makes your life easier - Mohamed Taman
6. This Ain’t Your Parents Java - Venkat Subramaniam

  The Gold Old Java: :
    ☐ 25 Years old this year!
    ☐ The journey of Java over the decades
    ☐ The slow days of the past

  Java 8, the game changer:
    ☐ From imperative and OO to imperative, OO, and functional style

  Java 9 Improvements:
    ☐ Java Module System (Project Jigsaw - 10 years of effort)
        Modular JDK
        Modular Java Source Code
        Modular Run-time Images
        Encapsulate Java Internal APIs
        Java Platform Module System

    ☐ Factory methods for Collections List.of, Map.of, Set.of
    ☐ JShell
    ☐ private method & private static methods in interfaces (Useful to organize code in default methods)
    ☐ HTTP/2 Client (incubated)
        HttpClient.java
        HttpRequest.java
        HttpResponse.java
        WebSocket.java

  Java 10: (Fastest release in the history of Java)
    ☐ Time-Based Release Versioning
    ☐ Local variable type inference

  Java 11 and beyond:
    ☐ Running Java File with single command
    ☐ New utility methods in String class
        isBlank()
        strip()
        stripLeading()
        stripTrailing()
        lines()
        repeat(int)

    ☐ Local-Variable Syntax for Lambda Parameters
        (@NotNull var a, var b) -> a + b

    ☐ Reading/Writing Strings to and from the Files
        Files.writeString()
        Files.readString()
    ☐ Remove the Java EE and CORBA Modules
    ☐ HTTP/2 Client (Standardized)
    ☐ Deprecate the Nashorn JavaScript Engine
    ☐ Switch expressions (Standar as of Java 14)
        * The new Syntax removes the need for break statement to prevent fallthroughs.
        * Switch Expressions don’t fall through anymore.
        * Furthermore, we can define multiple constants in the same label.
        * default case is now compulsory in Switch Expressions.
        * break is used in Switch Expressions to return values from a case itself.

    ☐ Pattern matching instanceof
        Earlier:
          if (obj instanceof String) {
            String s = (String) obj;
          ..
        Now:
          if (obj instanceof String s)


    ☐ Text blocks (preview as of 14)
        String query = """
                       SELECT `EMP_ID`, `LAST_NAME` FROM `EMPLOYEE_TB`
                       WHERE `CITY` = 'INDIANAPOLIS'
                       ORDER BY `EMP_ID`, `LAST_NAME`;
                       """;

  Where's Java heading:
    ☐ Pragmatic growth
    ☐ Shorter release cycles

    Project Panama:
     ☐ Foreign functional interfaces

    Project Valhalla:
       ☐ Value types
       ☐ Generic Specializations

    Project Amber:
      ☐ Reducing verbosity
      ☐ Local Variable Type inference
      ☐ Switch Expressions
      ☐ Text Blocks
      ☐ Record (data) classes
      ☐ Smart casting
      ☐ Sealed Classes
      ☐ Pattern Matching
    Project Loom:
     ☐ Continuations, Fibers

List of features and preview features of Java 14 - https://openjdk.java.net/projects/jdk/14/

7. Spring Security 5.2 & Multi-tenancy OAuth with Spring Security 5.2 - Josh Cummings
  ☐ Property to configure a resource server
      spring.security.oauth2.resourceserver.jwt.issuer-uri=

  ☐ Property to configure a oauth 2.0 clients
      spring.security.oauth2.client.registration.auth0.client-id=
      spring.security.oauth2.client.registration.auth0.client-secret=
      spring.security.oauth2.client.registration.auth0.scope=
      etc...

      spring.security.oauth2.client.registration.keycloak.client-id=

      SPEL: #{principal.claims['user_name']}

  ☐ WebSecurityConfigurer supports configuring resource server

      public void configure(HttpSecurity http) { // Default if spring.security.oauth2.resourceserver.jwt.issuer-uri exists
        http
          .authorizeRequest()
            .anyRequest().authenticated()
            .and()
          .oauth2ResourceServer()
            .jwt()
      }

  ☐ Class/Interface to customize Authority extraction
      JwtAuthenticationConverter.java

  ☐ Class to enhance token validation
      OAuth2TokenValidator.java

  ☐ Other classes to checkout
      ServletOAuth2AuthorizedClientExchangeFilterFunction.java
      OAuth2AuthorizedClient.java
      OAuth2AuthorizationRequestResolver.java
      AuthenticationEntryPoint.java


8. Working with large databases - Jay Kelkar
  ☐ Data accuracy and safety - non negociable
  ☐ Backup and restore - Verify Backup, Make atleast 2 copies
  ☐ Limit access (user for app and user for flyway etc...)
  ☐ Do explain plan
  ☐ Do cost vs benefits analysis for index and do create indexes where needed (Indexs fill factor, Table fill factor)
  ☐ Database statistics
  ☐ Log slow queries
  ☐ Balancing normalization & joins
  ☐ Donot allow open ended queries, restrict it by dates
  ☐ Use cache like Redis in front of DB
  ☐ Any query that takes more than 1 second is bad for sync call or almost all the time

9. Improving productivity + fun and how IDEs help
    Disclaimer: Please valid these plugins with infosec or respective team before using them. I am not responsible for any damage. Please read respective plugin documentation on usage.
    FUN PLUGINS:
      Power Mode 2 Plugin - https://plugins.jetbrains.com/plugin/8251-power-mode-ii
      Rainbow Brackets: https://plugins.jetbrains.com/plugin/10080-rainbow-brackets
      For More Fun Plugins: https://plugins.jetbrains.com/search?headline=16-fun-stuff&products=idea&tags=Fun%20stuff
    TROUBLESHOOTING PLUGINS:
      Stackoverflow: https://plugins.jetbrains.com/plugin/9513-stackoverflow
    PRODUCTIVITY PLUGIN:
      https://plugins.jetbrains.com/plugin/10405-squaretest
      Lombok: https://plugins.jetbrains.com/plugin/6317-lombok
      MapStruct: https://plugins.jetbrains.com/plugin/10036-mapstruct-support
    UNIT TEST GENERATOR:
      https://plugins.jetbrains.com/plugin/10405-squaretest
    OTHER USEFUL ONES:
      AWS Toolkit: https://plugins.jetbrains.com/plugin/11349-aws-toolkit
      CamelCase: https://plugins.jetbrains.com/plugin/7160-camelcase
      Shortcut Teaching Key Promoter X: https://plugins.jetbrains.com/plugin/9792-key-promoter-x
